#!/bin/bash

# Start the vision server

DIR=/home/odroid/VisionServer/server

SCRIPT=visionserver2020.py

# For running standalone (not alongside a RoboRio), set TEST_MODE=1
TEST_MODE=0

# For serious debugging, add the "--verbose" option, but it is very noisy
ARGS="--calib_dir ../data/calibration"
[ $TEST_MODE = 1 ] && ARGS="$ARGS --test"

# Turn on web server
WEB_SERVER=0
WEB_ARGS="-p 80"

LOG_DIR="logs"
LOG_BASE="visionserver"

# place VisionServer saves images. Must match the value in the Python code.
IMAGE_SAVE_DIR='saved_images'

logfile_name() {
    if [ ! -d $LOG_DIR ]; then
        mkdir $LOG_DIR
        index=1
    else
        # don't sort by time, since the ODROID has a bad clock. Sort by filename (reverse order).
        line=$( ls -1r $LOG_DIR/${LOG_BASE}_*.log 2>/dev/null | head -1 )
        if [ -z "$line" ]; then
            index=1
        else
            b=$( basename $line '.log' )
            index=${b#${LOG_BASE}_}
            # this is stupid. Bash interprets the leading 0s as base-8. Say it is base 10.
            index=$(( 10#$index + 1 ))
        fi
    fi

    printf "$LOG_DIR/${LOG_BASE}_%05d.log" $index
}

# no longer used, but keep here in case we need it again
# setup_camera() {
#     # set camera to fixed focus
#     # can't be done in cscore
#     # NOTE order matters
#     uvcdynctrl -d "$1" -s 'Focus, Auto' 0
#     echo -n "$1: Focus, Auto = "
#     uvcdynctrl -d "$1" -g 'Focus, Auto'

#     uvcdynctrl -d "$1" -s 'Focus (absolute)' 0
#     echo -n "$1: Focus (absolute) "
#     uvcdynctrl -d "$1" -g 'Focus (absolute)'

#     # uvcdynctrl -d "$1" -s 'White Balance Temperature, Auto' 0
#     # echo -n "$1: White Balance Temperature, Auto "
#     # uvcdynctrl -d "$1" -g 'White Balance Temperature, Auto'

#     # uvcdynctrl -d "$1" -s 'White Balance Temperature' 2866
#     # echo -n "$1: White Balance Temperature "
#     # uvcdynctrl -d "$1" -g 'White Balance Temperature'
# }

ping_address() {
    local addr="$1"

    local count=0
    local success=0
    local endtime=$(date +%s -d '+90 seconds')  # not sure how long radio takes. Time it later.
    local sleep=0

    while true; do
        count=$(($count + 1))
        if ping -W 1 -c 1 $addr > /dev/null; then
            success=$((success + 1))
            sleep=1
        else
            success=0
            # if it timed out, no need to wait between tries
            sleep=0
        fi

        if [ $success -ge 3 ]; then
            echo "Success. $addr responded 3 times. Ping count = $count"
            return
        fi

        # Exit conditions. Either 120 tries, or 90 seconds
        if [ $count -ge 120 ]; then
            echo "$addr did not answer in $count pings. Giving up"
            return
        fi
        if [ $(date +%s) -ge $endtime ]; then
            echo "$addr did not answer in 90 seconds. Giving up"
            return
        fi

        sleep $sleep
    done
}

set_cpu_performance() {
    # set all the CPUs to performance mode
    # not sure if this is needed, but it can't hurt

    for c in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
        echo performance > $c
    done
}

start_webserver() {
    if [ $TEST_MODE = 1 ]; then
        WEB_ARGS="$WEB_ARGS --robot=localhost"
    else
        WEB_ARGS="$WEB_ARGS --robot=10.28.77.12"
    fi
    (
        cd ../webControls
        python3 -m pynetworktables2js $WEB_ARGS > /dev/null 2>&1 < /dev/null &
    )
}

case "$1" in
    stop)
	pkill -f $SCRIPT
	pkill -f pynetworktables2js
	;;

    start)
        cd $DIR

        set_cpu_performance
        
        # make sure the image save directory is always there, and read/write for everyone
        mkdir -m a=rwx -p $IMAGE_SAVE_DIR
        
        LOG_FILE=$( logfile_name )

	date > $LOG_FILE
        ls -l /dev/v4l/by-id >> $LOG_FILE

        # Pinging the radio seems to be needed to get the Ethernet interface up reliably.
        # Wait until radio is completely up.
        radio=$(route -n | awk '$1=="0.0.0.0"{print $2}')
        ##ping_address "$radio" >> $LOG_FILE 2>&1

        # Alternate: just keep pinging
        ##ping $radio > /dev/null 2>&1 < /dev/null &

        # Start the server, but limit the CPU to #4-7, which are the fast ones
        echo '' >> $LOG_FILE
        taskset -c 4-7 python3 ./$SCRIPT $ARGS >> $LOG_FILE 2>&1 < /dev/null &

        if [ $WEB_SERVER = 1 ]; then
           start_webserver
        fi
	;;

    restart)
	$0 stop
	$0 start
	;;

    *)
	echo "$0 (start|stop|restart)"
	;;
esac
